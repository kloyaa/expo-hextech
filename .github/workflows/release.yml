name: EAS Build and Release

on:
  push:
    branches:
      - master
      - develop
      - release/*

jobs:
  setup:
    name: Setup Environment and Get App Version
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get_app_version.outputs.app_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.10.0'

      - name: Install dependencies
        run: npm ci

      - name: Get App Version from package.json
        id: get_app_version
        run: |
          APP_VERSION=$(node -p "require('./package.json').version")
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "App Version: $APP_VERSION"

  build-android:
    name: Build Android App
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.10.0'

      - name: Install dependencies
        run: npm ci

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Set up Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android App with EAS
        run: |
          eas build --platform android --profile production --no-wait

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
        id: semantic_release
        run: npx semantic-release

      - name: Find AAB file
        if: steps.semantic_release.outcome == 'success'
        id: find_aab
        run: |
          AAB_FILES=$(find . -iname "*.aab")

          if [[ -z "$AAB_FILES" ]]; then
            echo "::error::No AAB files found!"
            exit 1
          elif [[ $(echo "$AAB_FILES" | wc -l) -gt 1 ]]; then
            echo "::error::Multiple AAB files found: $AAB_FILES. Please specify which one to upload."
            exit 1
          else
            AAB_FILE=$(echo "$AAB_FILES" | head -n 1)
            echo "aab_path=$AAB_FILE" >> $GITHUB_OUTPUT
            echo "Found AAB file: $AAB_FILE"
          fi

      - name: Upload AAB to GitHub Release
        if: steps.semantic_release.outcome == 'success'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.find_aab.outputs.aab_path }} # Directly use the AAB path
          tag_name: v${{ steps.semantic_release.outputs.version }}
          name: "Release v${{ steps.semantic_release.outputs.version }}"
          body: "Automated release via GitHub Actions."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        if: steps.semantic_release.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: app-builds-v${{ steps.semantic_release.outputs.version }}
          path: ${{ steps.find_aab.outputs.aab_path }}  # Directly use the AAB path

  # release:
  #   name: Release and Publish to Expo
  #   needs: build-android
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master'
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '20.10.0'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install EAS CLI
  #       run: npm install -g eas-cli

  #     - name: Set up Expo
  #       uses: expo/expo-github-action@v8
  #       with:
  #         expo-version: latest
  #         eas-version: latest
  #         token: ${{ secrets.EXPO_TOKEN }}

  #     # Run Semantic Release to generate a new version tag
      # - name: Semantic Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   id: semantic_release
      #   run: npx semantic-release